/*
 * generated by Xtext
 */
package com.opcoach.restaurant.menu.xtext.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.opcoach.restaurant.menu.xtext.services.MenuDslGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class MenuDslFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension MenuDslGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		for(comma: findKeywords(',')) {
			c.setNoLinewrap().before(comma)
			c.setNoSpace().before(comma)
			c.setLinewrap().after(comma)
		}
		var firstRule = true
		for(group:findRuleCalls(groupAccess.rule)){
			if(firstRule==true) {
				c.setIndentationIncrement.before(group)
				c.setLinewrap(1).before(group)
				firstRule = false
			}
			c.setLinewrap(1).after(group)
			if(group==findRuleCalls(recipeAccess.rule).last) {
				c.setIndentationDecrement.after(group)
			}
		}
		
		firstRule = true
		for(group:findRuleCalls(recipeAccess.rule)){
			if(firstRule==true) {
				c.setIndentationIncrement.before(group)
				c.setLinewrap(1).before(group)
				firstRule = false
			}
			c.setLinewrap(1).after(group)
			if(group==findRuleCalls(recipeAccess.rule).last) {
				c.setIndentationDecrement.after(group)
			}
		}
//		c.setIndentationIncrement.before(groupAccess.rule)
//		c.setIndentationDecrement.after(groupAccess.)
//		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
//		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
//		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}
}
