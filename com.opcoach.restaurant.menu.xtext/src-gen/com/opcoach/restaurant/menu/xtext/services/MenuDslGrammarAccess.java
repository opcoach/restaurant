/*
* generated by Xtext
*/
package com.opcoach.restaurant.menu.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MenuDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Menu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMenuAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMenuKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cGroupsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cGroupsGroupParserRuleCall_3_0_0 = (RuleCall)cGroupsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cGroupsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_3_1_1_0 = (RuleCall)cGroupsAssignment_3_1_1.eContents().get(0);
		
		//Menu:
		//	{Menu} "Menu" name=EString (groups+=Group ("," groups+=Group)*)?;
		public ParserRule getRule() { return rule; }

		//{Menu} "Menu" name=EString (groups+=Group ("," groups+=Group)*)?
		public Group getGroup() { return cGroup; }

		//{Menu}
		public Action getMenuAction_0() { return cMenuAction_0; }

		//"Menu"
		public Keyword getMenuKeyword_1() { return cMenuKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//(groups+=Group ("," groups+=Group)*)?
		public Group getGroup_3() { return cGroup_3; }

		//groups+=Group
		public Assignment getGroupsAssignment_3_0() { return cGroupsAssignment_3_0; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_0_0() { return cGroupsGroupParserRuleCall_3_0_0; }

		//("," groups+=Group)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_3_1_1() { return cGroupsAssignment_3_1_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_1_1_0() { return cGroupsGroupParserRuleCall_3_1_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryCategoryEnumRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRecipesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRecipesRecipeParserRuleCall_4_0_0 = (RuleCall)cRecipesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRecipesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRecipesRecipeParserRuleCall_4_1_1_0 = (RuleCall)cRecipesAssignment_4_1_1.eContents().get(0);
		
		//Group:
		//	{Group} "Group" name=EString category=Category? (recipes+=Recipe ("," recipes+=Recipe)*)?;
		public ParserRule getRule() { return rule; }

		//{Group} "Group" name=EString category=Category? (recipes+=Recipe ("," recipes+=Recipe)*)?
		public Group getGroup() { return cGroup; }

		//{Group}
		public Action getGroupAction_0() { return cGroupAction_0; }

		//"Group"
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//category=Category?
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//Category
		public RuleCall getCategoryCategoryEnumRuleCall_3_0() { return cCategoryCategoryEnumRuleCall_3_0; }

		//(recipes+=Recipe ("," recipes+=Recipe)*)?
		public Group getGroup_4() { return cGroup_4; }

		//recipes+=Recipe
		public Assignment getRecipesAssignment_4_0() { return cRecipesAssignment_4_0; }

		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_4_0_0() { return cRecipesRecipeParserRuleCall_4_0_0; }

		//("," recipes+=Recipe)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//recipes+=Recipe
		public Assignment getRecipesAssignment_4_1_1() { return cRecipesAssignment_4_1_1; }

		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_4_1_1_0() { return cRecipesRecipeParserRuleCall_4_1_1_0; }
	}

	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecipeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecipeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPriceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPriceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPriceEBigDecimalParserRuleCall_3_1_0 = (RuleCall)cPriceAssignment_3_1.eContents().get(0);
		private final Assignment cAmountAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAmountEIntParserRuleCall_4_0 = (RuleCall)cAmountAssignment_4.eContents().get(0);
		private final Assignment cAmountTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAmountTypeAmountTypeEnumRuleCall_5_0 = (RuleCall)cAmountTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIngredientsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIngredientsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIngredientsIngredientParserRuleCall_6_1_0 = (RuleCall)cIngredientsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cIngredientsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cIngredientsIngredientParserRuleCall_6_2_1_0 = (RuleCall)cIngredientsAssignment_6_2_1.eContents().get(0);
		
		//Recipe:
		//	{Recipe} "Recipe" name=EString ("price" price=EBigDecimal)? amount=EInt? amountType=AmountType? ("ingredients"
		//	ingredients+=Ingredient ("," ingredients+=Ingredient)*)?;
		public ParserRule getRule() { return rule; }

		//{Recipe} "Recipe" name=EString ("price" price=EBigDecimal)? amount=EInt? amountType=AmountType? ("ingredients"
		//ingredients+=Ingredient ("," ingredients+=Ingredient)*)?
		public Group getGroup() { return cGroup; }

		//{Recipe}
		public Action getRecipeAction_0() { return cRecipeAction_0; }

		//"Recipe"
		public Keyword getRecipeKeyword_1() { return cRecipeKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("price" price=EBigDecimal)?
		public Group getGroup_3() { return cGroup_3; }

		//"price"
		public Keyword getPriceKeyword_3_0() { return cPriceKeyword_3_0; }

		//price=EBigDecimal
		public Assignment getPriceAssignment_3_1() { return cPriceAssignment_3_1; }

		//EBigDecimal
		public RuleCall getPriceEBigDecimalParserRuleCall_3_1_0() { return cPriceEBigDecimalParserRuleCall_3_1_0; }

		//amount=EInt?
		public Assignment getAmountAssignment_4() { return cAmountAssignment_4; }

		//EInt
		public RuleCall getAmountEIntParserRuleCall_4_0() { return cAmountEIntParserRuleCall_4_0; }

		//amountType=AmountType?
		public Assignment getAmountTypeAssignment_5() { return cAmountTypeAssignment_5; }

		//AmountType
		public RuleCall getAmountTypeAmountTypeEnumRuleCall_5_0() { return cAmountTypeAmountTypeEnumRuleCall_5_0; }

		//("ingredients" ingredients+=Ingredient ("," ingredients+=Ingredient)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"ingredients"
		public Keyword getIngredientsKeyword_6_0() { return cIngredientsKeyword_6_0; }

		//ingredients+=Ingredient
		public Assignment getIngredientsAssignment_6_1() { return cIngredientsAssignment_6_1; }

		//Ingredient
		public RuleCall getIngredientsIngredientParserRuleCall_6_1_0() { return cIngredientsIngredientParserRuleCall_6_1_0; }

		//("," ingredients+=Ingredient)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//ingredients+=Ingredient
		public Assignment getIngredientsAssignment_6_2_1() { return cIngredientsAssignment_6_2_1; }

		//Ingredient
		public RuleCall getIngredientsIngredientParserRuleCall_6_2_1_0() { return cIngredientsIngredientParserRuleCall_6_2_1_0; }
	}

	public class EBigDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBigDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EBigDecimal returns ecore::EBigDecimal:
		//	INT? "." INT;
		public ParserRule getRule() { return rule; }

		//INT? "." INT
		public Group getGroup() { return cGroup; }

		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ingredient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIngredientAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIngredientKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSpicinessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpicinessSpicinessEnumRuleCall_3_0 = (RuleCall)cSpicinessAssignment_3.eContents().get(0);
		
		//Ingredient:
		//	{Ingredient} "Ingredient" name=EString spiciness=Spiciness?;
		public ParserRule getRule() { return rule; }

		//{Ingredient} "Ingredient" name=EString spiciness=Spiciness?
		public Group getGroup() { return cGroup; }

		//{Ingredient}
		public Action getIngredientAction_0() { return cIngredientAction_0; }

		//"Ingredient"
		public Keyword getIngredientKeyword_1() { return cIngredientKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//spiciness=Spiciness?
		public Assignment getSpicinessAssignment_3() { return cSpicinessAssignment_3; }

		//Spiciness
		public RuleCall getSpicinessSpicinessEnumRuleCall_3_0() { return cSpicinessSpicinessEnumRuleCall_3_0; }
	}
	
	
	public class CategoryElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBreakfastEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBreakfastBreakfastKeyword_0_0 = (Keyword)cBreakfastEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDinnerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDinnerDinnerKeyword_1_0 = (Keyword)cDinnerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLunchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLunchLunchKeyword_2_0 = (Keyword)cLunchEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSupperEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSupperSupperKeyword_3_0 = (Keyword)cSupperEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDessertEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDessertDessertKeyword_4_0 = (Keyword)cDessertEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Category:
		//	breakfast | dinner | lunch | supper | dessert;
		public EnumRule getRule() { return rule; }

		//breakfast | dinner | lunch | supper | dessert
		public Alternatives getAlternatives() { return cAlternatives; }

		//breakfast
		public EnumLiteralDeclaration getBreakfastEnumLiteralDeclaration_0() { return cBreakfastEnumLiteralDeclaration_0; }

		//"breakfast"
		public Keyword getBreakfastBreakfastKeyword_0_0() { return cBreakfastBreakfastKeyword_0_0; }

		//dinner
		public EnumLiteralDeclaration getDinnerEnumLiteralDeclaration_1() { return cDinnerEnumLiteralDeclaration_1; }

		//"dinner"
		public Keyword getDinnerDinnerKeyword_1_0() { return cDinnerDinnerKeyword_1_0; }

		//lunch
		public EnumLiteralDeclaration getLunchEnumLiteralDeclaration_2() { return cLunchEnumLiteralDeclaration_2; }

		//"lunch"
		public Keyword getLunchLunchKeyword_2_0() { return cLunchLunchKeyword_2_0; }

		//supper
		public EnumLiteralDeclaration getSupperEnumLiteralDeclaration_3() { return cSupperEnumLiteralDeclaration_3; }

		//"supper"
		public Keyword getSupperSupperKeyword_3_0() { return cSupperSupperKeyword_3_0; }

		//dessert
		public EnumLiteralDeclaration getDessertEnumLiteralDeclaration_4() { return cDessertEnumLiteralDeclaration_4; }

		//"dessert"
		public Keyword getDessertDessertKeyword_4_0() { return cDessertDessertKeyword_4_0; }
	}

	public class AmountTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AmountType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGramEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGramGramKeyword_0_0 = (Keyword)cGramEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillilitersEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillilitersMillilitersKeyword_1_0 = (Keyword)cMillilitersEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBottlesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBottlesBottlesKeyword_2_0 = (Keyword)cBottlesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cItemsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cItemsItemsKeyword_3_0 = (Keyword)cItemsEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AmountType:
		//	gram | milliliters | bottles | items;
		public EnumRule getRule() { return rule; }

		//gram | milliliters | bottles | items
		public Alternatives getAlternatives() { return cAlternatives; }

		//gram
		public EnumLiteralDeclaration getGramEnumLiteralDeclaration_0() { return cGramEnumLiteralDeclaration_0; }

		//"gram"
		public Keyword getGramGramKeyword_0_0() { return cGramGramKeyword_0_0; }

		//milliliters
		public EnumLiteralDeclaration getMillilitersEnumLiteralDeclaration_1() { return cMillilitersEnumLiteralDeclaration_1; }

		//"milliliters"
		public Keyword getMillilitersMillilitersKeyword_1_0() { return cMillilitersMillilitersKeyword_1_0; }

		//bottles
		public EnumLiteralDeclaration getBottlesEnumLiteralDeclaration_2() { return cBottlesEnumLiteralDeclaration_2; }

		//"bottles"
		public Keyword getBottlesBottlesKeyword_2_0() { return cBottlesBottlesKeyword_2_0; }

		//items
		public EnumLiteralDeclaration getItemsEnumLiteralDeclaration_3() { return cItemsEnumLiteralDeclaration_3; }

		//"items"
		public Keyword getItemsItemsKeyword_3_0() { return cItemsItemsKeyword_3_0; }
	}

	public class SpicinessElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Spiciness");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVeryHotEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVeryHotVeryHotKeyword_0_0 = (Keyword)cVeryHotEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHotHotKeyword_1_0 = (Keyword)cHotEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNormalNormalKeyword_2_0 = (Keyword)cNormalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMildEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMildMildKeyword_3_0 = (Keyword)cMildEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Spiciness:
		//	VeryHot | Hot | Normal | Mild;
		public EnumRule getRule() { return rule; }

		//VeryHot | Hot | Normal | Mild
		public Alternatives getAlternatives() { return cAlternatives; }

		//VeryHot
		public EnumLiteralDeclaration getVeryHotEnumLiteralDeclaration_0() { return cVeryHotEnumLiteralDeclaration_0; }

		//"VeryHot"
		public Keyword getVeryHotVeryHotKeyword_0_0() { return cVeryHotVeryHotKeyword_0_0; }

		//Hot
		public EnumLiteralDeclaration getHotEnumLiteralDeclaration_1() { return cHotEnumLiteralDeclaration_1; }

		//"Hot"
		public Keyword getHotHotKeyword_1_0() { return cHotHotKeyword_1_0; }

		//Normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_2() { return cNormalEnumLiteralDeclaration_2; }

		//"Normal"
		public Keyword getNormalNormalKeyword_2_0() { return cNormalNormalKeyword_2_0; }

		//Mild
		public EnumLiteralDeclaration getMildEnumLiteralDeclaration_3() { return cMildEnumLiteralDeclaration_3; }

		//"Mild"
		public Keyword getMildMildKeyword_3_0() { return cMildMildKeyword_3_0; }
	}
	
	private final MenuElements pMenu;
	private final EStringElements pEString;
	private final GroupElements pGroup;
	private final CategoryElements unknownRuleCategory;
	private final RecipeElements pRecipe;
	private final EBigDecimalElements pEBigDecimal;
	private final EIntElements pEInt;
	private final AmountTypeElements unknownRuleAmountType;
	private final IngredientElements pIngredient;
	private final SpicinessElements unknownRuleSpiciness;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MenuDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMenu = new MenuElements();
		this.pEString = new EStringElements();
		this.pGroup = new GroupElements();
		this.unknownRuleCategory = new CategoryElements();
		this.pRecipe = new RecipeElements();
		this.pEBigDecimal = new EBigDecimalElements();
		this.pEInt = new EIntElements();
		this.unknownRuleAmountType = new AmountTypeElements();
		this.pIngredient = new IngredientElements();
		this.unknownRuleSpiciness = new SpicinessElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.opcoach.restaurant.menu.xtext.MenuDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Menu:
	//	{Menu} "Menu" name=EString (groups+=Group ("," groups+=Group)*)?;
	public MenuElements getMenuAccess() {
		return pMenu;
	}
	
	public ParserRule getMenuRule() {
		return getMenuAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Group:
	//	{Group} "Group" name=EString category=Category? (recipes+=Recipe ("," recipes+=Recipe)*)?;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//enum Category:
	//	breakfast | dinner | lunch | supper | dessert;
	public CategoryElements getCategoryAccess() {
		return unknownRuleCategory;
	}
	
	public EnumRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Recipe:
	//	{Recipe} "Recipe" name=EString ("price" price=EBigDecimal)? amount=EInt? amountType=AmountType? ("ingredients"
	//	ingredients+=Ingredient ("," ingredients+=Ingredient)*)?;
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}

	//EBigDecimal returns ecore::EBigDecimal:
	//	INT? "." INT;
	public EBigDecimalElements getEBigDecimalAccess() {
		return pEBigDecimal;
	}
	
	public ParserRule getEBigDecimalRule() {
		return getEBigDecimalAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//enum AmountType:
	//	gram | milliliters | bottles | items;
	public AmountTypeElements getAmountTypeAccess() {
		return unknownRuleAmountType;
	}
	
	public EnumRule getAmountTypeRule() {
		return getAmountTypeAccess().getRule();
	}

	//Ingredient:
	//	{Ingredient} "Ingredient" name=EString spiciness=Spiciness?;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}

	//enum Spiciness:
	//	VeryHot | Hot | Normal | Mild;
	public SpicinessElements getSpicinessAccess() {
		return unknownRuleSpiciness;
	}
	
	public EnumRule getSpicinessRule() {
		return getSpicinessAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
