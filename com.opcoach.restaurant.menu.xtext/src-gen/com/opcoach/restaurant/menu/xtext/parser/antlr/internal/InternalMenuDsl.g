/*
* generated by Xtext
*/
grammar InternalMenuDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.opcoach.restaurant.menu.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.opcoach.restaurant.menu.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.opcoach.restaurant.menu.xtext.services.MenuDslGrammarAccess;

}

@parser::members {

 	private MenuDslGrammarAccess grammarAccess;
 	
    public InternalMenuDslParser(TokenStream input, MenuDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Group";	
   	}
   	
   	@Override
   	protected MenuDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGroupAccess().getGroupAction_0(),
            $current);
    }
)	otherlv_1='Group' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupAccess().getGroupKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='category' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupAccess().getCategoryKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getCategoryCategoryEnumRuleCall_4_1_0()); 
	    }
		lv_category_5_0=ruleCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"category",
        		lv_category_5_0, 
        		"Category");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='recipes' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupAccess().getRecipesKeyword_5_0());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getRecipesRecipeParserRuleCall_5_2_0()); 
	    }
		lv_recipes_8_0=ruleRecipe		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"recipes",
        		lv_recipes_8_0, 
        		"Recipe");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getGroupAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getRecipesRecipeParserRuleCall_5_3_1_0()); 
	    }
		lv_recipes_10_0=ruleRecipe		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"recipes",
        		lv_recipes_10_0, 
        		"Recipe");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRecipe
entryRuleRecipe returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecipeRule()); }
	 iv_ruleRecipe=ruleRecipe 
	 { $current=$iv_ruleRecipe.current; } 
	 EOF 
;

// Rule Recipe
ruleRecipe returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecipeAccess().getRecipeAction_0(),
            $current);
    }
)	otherlv_1='Recipe' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecipeAccess().getRecipeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='price' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecipeAccess().getPriceKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getPriceEBigDecimalParserRuleCall_4_1_0()); 
	    }
		lv_price_5_0=ruleEBigDecimal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		set(
       			$current, 
       			"price",
        		lv_price_5_0, 
        		"EBigDecimal");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='amount' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecipeAccess().getAmountKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getAmountEIntParserRuleCall_5_1_0()); 
	    }
		lv_amount_7_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		set(
       			$current, 
       			"amount",
        		lv_amount_7_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='amountType' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRecipeAccess().getAmountTypeKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getAmountTypeAmountTypeEnumRuleCall_6_1_0()); 
	    }
		lv_amountType_9_0=ruleAmountType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		set(
       			$current, 
       			"amountType",
        		lv_amountType_9_0, 
        		"AmountType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='ingredients' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRecipeAccess().getIngredientsKeyword_7_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getIngredientsIngredientParserRuleCall_7_2_0()); 
	    }
		lv_ingredients_12_0=ruleIngredient		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		add(
       			$current, 
       			"ingredients",
        		lv_ingredients_12_0, 
        		"Ingredient");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRecipeAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getIngredientsIngredientParserRuleCall_7_3_1_0()); 
	    }
		lv_ingredients_14_0=ruleIngredient		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		add(
       			$current, 
       			"ingredients",
        		lv_ingredients_14_0, 
        		"Ingredient");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_7_4());
    }
)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleEBigDecimal
entryRuleEBigDecimal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBigDecimalRule()); } 
	 iv_ruleEBigDecimal=ruleEBigDecimal 
	 { $current=$iv_ruleEBigDecimal.current.getText(); }  
	 EOF 
;

// Rule EBigDecimal
ruleEBigDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEBigDecimalAccess().getINTTerminalRuleCall_0()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBigDecimalAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getEBigDecimalAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleIngredient
entryRuleIngredient returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIngredientRule()); }
	 iv_ruleIngredient=ruleIngredient 
	 { $current=$iv_ruleIngredient.current; } 
	 EOF 
;

// Rule Ingredient
ruleIngredient returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIngredientAccess().getIngredientAction_0(),
            $current);
    }
)	otherlv_1='Ingredient' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIngredientAccess().getIngredientKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIngredientAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIngredientRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIngredientAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='spiciness' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIngredientAccess().getSpicinessKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIngredientAccess().getSpicinessSpicinessEnumRuleCall_4_1_0()); 
	    }
		lv_spiciness_5_0=ruleSpiciness		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIngredientRule());
	        }
       		set(
       			$current, 
       			"spiciness",
        		lv_spiciness_5_0, 
        		"Spiciness");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIngredientAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Rule Category
ruleCategory returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='breakfast' 
	{
        $current = grammarAccess.getCategoryAccess().getBreakfastEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCategoryAccess().getBreakfastEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='dinner' 
	{
        $current = grammarAccess.getCategoryAccess().getDinnerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCategoryAccess().getDinnerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='lunch' 
	{
        $current = grammarAccess.getCategoryAccess().getLunchEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCategoryAccess().getLunchEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='supper' 
	{
        $current = grammarAccess.getCategoryAccess().getSupperEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCategoryAccess().getSupperEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='dessert' 
	{
        $current = grammarAccess.getCategoryAccess().getDessertEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCategoryAccess().getDessertEnumLiteralDeclaration_4()); 
    }
));



// Rule AmountType
ruleAmountType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='gram' 
	{
        $current = grammarAccess.getAmountTypeAccess().getGramEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAmountTypeAccess().getGramEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='milliliters' 
	{
        $current = grammarAccess.getAmountTypeAccess().getMillilitersEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAmountTypeAccess().getMillilitersEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='bottles' 
	{
        $current = grammarAccess.getAmountTypeAccess().getBottlesEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAmountTypeAccess().getBottlesEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='items' 
	{
        $current = grammarAccess.getAmountTypeAccess().getItemsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAmountTypeAccess().getItemsEnumLiteralDeclaration_3()); 
    }
));



// Rule Spiciness
ruleSpiciness returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='VeryHot' 
	{
        $current = grammarAccess.getSpicinessAccess().getVeryHotEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSpicinessAccess().getVeryHotEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Hot' 
	{
        $current = grammarAccess.getSpicinessAccess().getHotEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSpicinessAccess().getHotEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Normal' 
	{
        $current = grammarAccess.getSpicinessAccess().getNormalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSpicinessAccess().getNormalEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Mild' 
	{
        $current = grammarAccess.getSpicinessAccess().getMildEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSpicinessAccess().getMildEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


