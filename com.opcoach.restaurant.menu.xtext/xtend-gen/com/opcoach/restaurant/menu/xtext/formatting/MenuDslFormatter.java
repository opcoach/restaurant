/**
 * generated by Xtext
 */
package com.opcoach.restaurant.menu.xtext.formatting;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.opcoach.restaurant.menu.xtext.services.MenuDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class MenuDslFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private MenuDslGrammarAccess _menuDslGrammarAccess;
  
  protected void configureFormatting(final FormattingConfig c) {
    List<Keyword> _findKeywords = this._menuDslGrammarAccess.findKeywords(",");
    for (final Keyword comma : _findKeywords) {
      {
        FormattingConfig.NoLinewrapLocator _setNoLinewrap = c.setNoLinewrap();
        _setNoLinewrap.before(comma);
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        _setNoSpace.before(comma);
        FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap();
        _setLinewrap.after(comma);
      }
    }
    boolean firstRule = true;
    MenuDslGrammarAccess.GroupElements _groupAccess = this._menuDslGrammarAccess.getGroupAccess();
    ParserRule _rule = _groupAccess.getRule();
    List<RuleCall> _findRuleCalls = this._menuDslGrammarAccess.findRuleCalls(_rule);
    for (final RuleCall group : _findRuleCalls) {
      {
        if ((firstRule == true)) {
          FormattingConfig.IndentationLocatorStart _setIndentationIncrement = c.setIndentationIncrement();
          _setIndentationIncrement.before(group);
          FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(1);
          _setLinewrap.before(group);
          firstRule = false;
        }
        FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap(1);
        _setLinewrap_1.after(group);
        MenuDslGrammarAccess.RecipeElements _recipeAccess = this._menuDslGrammarAccess.getRecipeAccess();
        ParserRule _rule_1 = _recipeAccess.getRule();
        List<RuleCall> _findRuleCalls_1 = this._menuDslGrammarAccess.findRuleCalls(_rule_1);
        RuleCall _last = IterableExtensions.<RuleCall>last(_findRuleCalls_1);
        boolean _equals = Objects.equal(group, _last);
        if (_equals) {
          FormattingConfig.IndentationLocatorEnd _setIndentationDecrement = c.setIndentationDecrement();
          _setIndentationDecrement.after(group);
        }
      }
    }
    firstRule = true;
    MenuDslGrammarAccess.RecipeElements _recipeAccess = this._menuDslGrammarAccess.getRecipeAccess();
    ParserRule _rule_1 = _recipeAccess.getRule();
    List<RuleCall> _findRuleCalls_1 = this._menuDslGrammarAccess.findRuleCalls(_rule_1);
    for (final RuleCall group_1 : _findRuleCalls_1) {
      {
        if ((firstRule == true)) {
          FormattingConfig.IndentationLocatorStart _setIndentationIncrement = c.setIndentationIncrement();
          _setIndentationIncrement.before(group_1);
          FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(1);
          _setLinewrap.before(group_1);
          firstRule = false;
        }
        FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap(1);
        _setLinewrap_1.after(group_1);
        MenuDslGrammarAccess.RecipeElements _recipeAccess_1 = this._menuDslGrammarAccess.getRecipeAccess();
        ParserRule _rule_2 = _recipeAccess_1.getRule();
        List<RuleCall> _findRuleCalls_2 = this._menuDslGrammarAccess.findRuleCalls(_rule_2);
        RuleCall _last = IterableExtensions.<RuleCall>last(_findRuleCalls_2);
        boolean _equals = Objects.equal(group_1, _last);
        if (_equals) {
          FormattingConfig.IndentationLocatorEnd _setIndentationDecrement = c.setIndentationDecrement();
          _setIndentationDecrement.after(group_1);
        }
      }
    }
  }
}
